@page "/";
<PageTitle>Contact Application</PageTitle>

<div class="search-bar">
	<input type="text" @bind-value="SearchTerm" @bind-value:event="oninput" placeholder="Search Contact..." />
	<img src="images/search-icon.png" alt="search icon" />
</div>

<div class="book-container">
	<div class="book-list-view">
		<div class="contact-list">
				
			@foreach (var contact in Contacts)
			{
				if ((string.IsNullOrEmpty(SearchTerm) || contact.Name.Contains(SearchTerm) || contact.LastName.Contains(SearchTerm)))
				{
					<li @onclick="() => setSelectedContact(contact.Name, contact.LastName)">@contact.Name @contact.LastName</li>
					@if (_isShowingContactInfo == true && selectedContact == contact.Name && selectedContact2 == contact.LastName)
					{
						<div class="modal-content">
							<div class="modal-title">
								<button class="close" @onclick="() => _isShowingContactInfo = false">&times;</button>
								<h4>@contact.Name @contact.LastName</h4>
							</div>
							<div class="contact-info">
								<p>@contact.Email</p>
								<p>@contact.Number</p>
								<p>Vägvägen 2 <br> 432 39 Stad</p>
							</div>
						</div>
					}
				}
			}

			@if (_isCreatingContact == true)
			{
				<div class="modal-content">
					<div class="modal-title">
						<button class="close" @onclick="() => _isCreatingContact = false">&times;</button>
						<h4>
							Name: <input @bind="_name" />
						</h4>
						<h4>
							Lastname: <input @bind="_lastName" />
						</h4>
					</div>
					<div class="contact-info">
						<p>Mail: <input @bind="_mail" /></p>
						<p>Number: <input @bind="_number" /></p>
						<p>Vägvägen 2 <br> 432 39 Stad</p>
					</div>

					<button @onclick="() => { _isCreatingContact = false; }">Close</button>
					<button @onclick="AddContact">Add</button>
				</div>
			}
	
		</div>
	</div> 
</div>

<button @onclick="NewContact">New Contact</button>

@code
{	
	public static string SearchTerm { get; set; } = "";
	private bool _isShowingContactInfo;
	private string selectedContact { get; set; } = "";
	private string selectedContact2 { get; set; } = "";
	private bool _isCreatingContact;
	private string _name = "";
	private string _lastName = "";
	private string _mail = "";
	private int _number;


	public List<Contact> Contacts = new List<Contact>()
	{
		new Contact("Kalle", "Persson", "kalle.persson@exempel.com", 0701231122),
		new Contact("Anders", "Andersson", "anders.andersson@exempel.com", 0701231122),
		new Contact("Stina", "Svensson", "stina.Svensson@exempel.com", 0701231122),
		new Contact("Kaj", "Bergström", "kaj.bergström@exempel.com", 0701231122),
		new Contact("Maja", "Johansson", "Maja.Johansson@exempel.com", 0701231122),
	};

	private void SortContacts()
	{
		Contacts = Contacts.OrderBy(x => x.Name).ToList();
	}

	protected override void OnInitialized()
	{
		SortContacts();
		base.OnInitialized();
	}

	private void setSelectedContact(string Name, string LastName)
	{
		_isShowingContactInfo = true;
		selectedContact = Name;
		selectedContact2 = LastName;
	}

	public void NewContact()
	{
		_isCreatingContact = true;
	}

	public void AddContact()
	{
		Contacts.Add(new Contact(_name, _lastName, _mail, _number));
		_isCreatingContact = false;
		OnInitialized();
	}
}
