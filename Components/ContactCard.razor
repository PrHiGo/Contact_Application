@page "/contactcard";



@foreach (var contact in Contacts)
{
	@if ((string.IsNullOrEmpty(SearchTerm) || contact.Name.Contains(SearchTerm) || contact.LastName.Contains(SearchTerm)))
	{
				<li @onclick="() => setSelectedContact(contact.Name, contact.LastName)">@contact.Name @contact.LastName</li>
	}
	@if (_isShowingContactInfo == true && selectedContact == contact.Name && selectedContact2 == contact.LastName)
	{
		<div class="modal">
			<div class="buttons"> 
				<button @onclick="() => _isEditingContact = true ">
					<img src="images/pencil-icon.png" alt="edit-icon" class="icon" />
				</button>
				<button class="close" @onclick="() => { _isShowingContactInfo = false; _isEditingContact = false; }">&times;</button>
			</div>

			<div class="modal-content">
				<div class="modal-title">
					<h4>@contact.Name @contact.LastName </h4>
				</div>
				<div class="contact-info">
					<p>@contact.Number</p>
					<p></p>
				</div>
			</div>
			@if (_isEditingContact == true)
			{
				
				<div class="edit-modal"> 
					<div class="modal-title">
						<p>Name: @Name<input /></p>
						<p>Lastname: @LastName<input /></p>
					</div>

					<div class="contact-info">
						<p>Mail: @Mail<input /></p>
						<p>PhoneNumber:@Number<input/></p>
					</div>
				</div>
				<div class="icons">
					<button @onclick="@Delete">
						<img src="images/remove-icon.png" alt="remove-icon" class="icon" />
					</button>
					<img src="images/favorite-icon.png" alt="favorites-icon" class="icon" />
					<button class ="save-btn" @onclick="Update">Save</button>
				</div>
			}
		</div>
	}
}

@code {
	[Parameter]
	public List<Contact> Contacts { get; set; } = new List<Contact>();

	[Parameter]
	public string? SearchTerm { get; set; }

	[Parameter]
	public Action AddContact { get; set; }

	public bool _isEditingContact;
	private bool _isCreatingContact;
	public bool EnableDelete { get; set; }

	@* public bool UpdateContact { get; set; } *@

	public string Name { get; set; } = "";
	public string LastName { get; set; } = "";
	public string Mail { get; set; } = "";
	public int Number { get; set; }


	public void Update()
	{
		AddContact();
		Delete();
		_isEditingContact = false;
		StateHasChanged();
	}

	public void Delete()
	{
		foreach (var contact in Contacts)
		{
			Contacts.Remove(contact);
			StateHasChanged();
			break;
		}

	}


	private bool _isShowingContactInfo;
	private string selectedContact { get; set; } = "";
	private string selectedContact2 { get; set; } = "";


	private void setSelectedContact(string Name, string LastName)
	{
		_isShowingContactInfo = true;
		selectedContact = Name;
		selectedContact2 = LastName;
	}
}
