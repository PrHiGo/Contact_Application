@page "/contactcard";

@foreach (var contact in Contacts)
{
	@if ((string.IsNullOrEmpty(SearchTerm) || contact.Name.Contains(SearchTerm) || contact.LastName.Contains(SearchTerm)))
	{
				<li @onclick="() => setSelectedContact(contact.Name, contact.LastName)">@contact.Name @contact.LastName</li>
	}
	@if (_isShowingContactInfo == true && selectedContact == contact.Name && selectedContact2 == contact.LastName)
	{
		<div class="modal">
			<div class="buttons"> 
				<button @onclick="() => _isEditingContact = true ">
					<img src="images/pencil-icon.png" alt="edit-icon" class="icon" />
				</button>
				<button class="close" @onclick="() => { _isShowingContactInfo = false; _isEditingContact = false; }">&times;</button>
			</div>

			<div class="modal-content">
				<div class="modal-title">
					<h4>@contact.Name @contact.LastName </h4>
				</div>
				<div class="contact-info">
					<p>@contact.Number</p>
					<p></p>
				</div>
			</div>
			@if (_isEditingContact == true)
			{
				
				<div class="edit-modal"> 
					<div class="modal-title">
						<p>Name: <input @bind="@Name" /></p>
						<p>Lastname:<input @bind ="@LastName" /></p>
					</div>

					<div class="contact-info">
						<p>Mail: <input @bind="@Mail" /></p>
						<p>PhoneNumber:<input @bind="@Number"/></p>
					</div>
				</div>
				<div class="icons">
					<button @onclick="() => RemoveContact(contact)">
						<img src="images/remove-icon.png" alt="remove-icon" class="icon" />
					</button>
					<img src="images/favorite-icon.png" alt="favorites-icon" class="icon" />
					<button class ="save-btn" @onclick="Update">Save</button>
				</div>
			}
		</div>
	}
}

@code {
	[Parameter]
	public List<Contact> Contacts { get; set; } = new List<Contact>();

	[Parameter]
	public string? SearchTerm { get; set; }

	private bool _isShowingContactInfo;
	private string selectedContact { get; set; } = "";
	private string selectedContact2 { get; set; } = "";
	public bool _isEditingContact;
	private bool _isCreatingContact;
	public bool EnableDelete { get; set; }


	public void EditContact(string name, string lastName, string mail, int number)
	{
		_isEditingContact = true;
	}

	// Updates the contact with new info
	public void Update()
	{
		Contacts.Add(new Contact(Name, LastName, Mail, Number));
		Contacts = Contacts.OrderBy(x => x.Name).ToList();
		_isEditingContact = false;
		_isShowingContactInfo = false;
		RemoveContact();
		OnInitialized();
		if(Name == ""){
			return;
		}
	}
	// Removes Contact from List
	public void RemoveContact(Contact contact)
	{
		foreach (var contact in Contacts)
		{
			Contacts.Remove(contact);
			StateHasChanged();
			break;
		}
	}

// Method is used to check if the name and last name is equal to selected one
	private void setSelectedContact(string Name, string LastName)
	{
		_isShowingContactInfo = true;
		selectedContact = Name;
		selectedContact2 = LastName;
	}
}
